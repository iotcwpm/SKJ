<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="md__home_nbentley_Trophia_Code_www_README" kind="page">
    <compoundname>md__home_nbentley_Trophia_Code_www_README</compoundname>
    <title>Trophia Website</title>
    <detaileddescription>
<para><heading level="2">Requirements</heading>
</para><para>The website uses Pelican, a tool for creating static content from markup files. We decided to use Pelican because of its simplicity, in terms of both authoring and deployment. This and other requirements can be installed using pip:</para><para>```sh sudo pip install -U -r requirements.pip ```</para><para><heading level="2">Setup</heading>
</para><para>Github pages are used for serving the site. The domain <ulink url="http://www.trophia.com">http://www.trophia.com</ulink> will point to <ulink url="http://trophia.github.com/www/">http://trophia.github.com/www/</ulink>. See <ulink url="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">https://help.github.com/articles/setting-up-a-custom-domain-with-pages</ulink> .</para><para>To do this it was necessary to:</para><para><itemizedlist>
<listitem><para>create a branch called &quot;gh-pages&quot;:</para></listitem></itemizedlist>
</para><para>```sh git branch gh-pages ```</para><para><itemizedlist>
<listitem><para>install <computeroutput>ghp-import</computeroutput> (already listed in <computeroutput>requirements.pip</computeroutput>)</para></listitem><listitem><para>create a CNAME file which is copied to <computeroutput>output</computeroutput> and then <computeroutput>gh-pages</computeroutput> branch on <computeroutput>make github_upload</computeroutput></para></listitem><listitem><para>create a CNAME mapping at gandi.net:</para></listitem></itemizedlist>
</para><para>``` www CNAME trophia.github.com. ```</para><para><heading level="2">Usage</heading>
</para><para>Write pages using markdown in the &quot;src&quot; directory and then use make to generate output:</para><para>```sh make html ```</para><para>Preview the pages in the <computeroutput>output</computeroutput> directory and then when happy commit and upload:</para><para>```sh git add . git commit make github_upload ``` </para>    </detaileddescription>
  </compounddef>
</doxygen>
