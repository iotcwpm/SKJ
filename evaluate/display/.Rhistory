theme(legend.position='none')
p2 <- ggplot(temp,aes(x=year,y=biomass_spawners_overall/1e3)) +
geom_line(aes(colour=replicate),alpha=0.3) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(v=0,alpha=0) +
labs(x="Year",y="Biomass (spawners,kt)") +
theme(legend.position='none')
multiplot(p1,p2)
temp <- subset(track,quarter==0 & procedure %in% c(-1,1))
p1 <- ggplot(temp,aes(x=year,y=catches_total/1e3)) +
geom_line(aes(colour=replicate),alpha=0.3) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(v=0,alpha=0) +
labs(x="Year",y="Catch (quarterly,kt)") +
theme(legend.position='none')
p2 <- ggplot(temp,aes(x=year,y=biomass_status)) +
geom_line(aes(colour=replicate),alpha=0.3) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(v=0,alpha=0) +
labs(x="Year",y="Status (spawners,B/B0)") +
theme(legend.position='none')
multiplot(p1,p2)
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
print(
temp <- subset(track,quarter==0 & procedure %in% c(-1,1))
ggplot(temp,aes(x=year+quarter/4,y=biomass_spawning_overall/1e6)) +
geom_line(aes(colour=factor(paste(procedure,replicate))),alpha=0.3) +
geom_vline(x=2015,linetype=2) +
geom_hline(v=0,alpha=0) +
labs(x="Year",y="Spawning biomass (mil. t)") +
theme(legend.position='none')
)
ddply(temp,.(replicate),mean(stock_status))
temp <- subset(track,procedure==1 & year==max(track$year))
ddply(temp,.(replicate),mean(stock_status))
ddply(temp,.(replicate),mean(biomass_status))
temp <- subset(track,procedure==1 & year==max(track$year))
ddply(temp,.(replicate),mean(biomass_status))
names(temp)
ddply(temp,.(replicate),summarise,by=mean(biomass_status))
temp <- ddply(temp,.(replicate),summarise,by=mean(biomass_status))
temp <- temp$replicate[order(temp$by)]
replicate_egs <- sorted[floor(length(temp)*c(0.2,0.5,0.8))]
replicate_egs
temp <- subset(track,procedure==1 & year>=2015)
temp <- ddply(temp,.(replicate),summarise,by=mean(biomass_status))
temp <- temp$replicate[order(temp$by)]
replicate_egs <- sorted[floor(length(temp)*c(0.2,0.5,0.8))]
replicate_egs
replicate_egs <- temp[floor(length(temp)*c(0.2,0.5,0.8))]
replicate_egs
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
?hsv
plot(1:3,1:3,col=hsv(c(0,0.6,0.9)),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.6,0.9),0.1),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.6,0.9),0.7,0.7),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.6,0.9),0.7,0.9),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.9),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.8),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.7),pch=16)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.7),pch=16,size=8)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.7),pch=16,cex=8)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=subset(data,replicate %in% replicate_egs),aes(x=year,y=y,colour=replicate)) +
geom_vline(x=2014.8,linetype=2) +
scale_colour_manual(values=hsv(c(0,0.33,0.66),0.7,0.7)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.7,0.7),pch=16,cex=8)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.6,0.7),pch=16,cex=8)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.4,0.7),pch=16,cex=8)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.4,0.9),pch=16,cex=8)
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.4,0.8),pch=16,cex=8)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=subset(data,replicate %in% replicate_egs),aes(x=year,y=y,colour=replicate)) +
geom_vline(x=2014.8,linetype=2) +
scale_colour_manual(values=hsv(c(0,0.33,0.66),0.4,0.8)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
replicate_egs <- factor(replicate_egs,levels=replicate_egs,ordered=T)
replicate_egs
plot(1:3,1:3,col=hsv(c(0,0.33,0.66),0.4,0.8),pch=16,cex=8)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=subset(data,replicate %in% replicate_egs),aes(x=year,y=y,colour=replicate)) +
geom_vline(x=2014.8,linetype=2) +
scale_colour_manual(values=hsv(c(0,0.66,0.33),0.6,0.6)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
temp <- subset(track,procedure==1 & year>=2015)
temp <- ddply(temp,.(replicate),summarise,by=mean(biomass_status))
temp <- temp$replicate[order(temp$by)]
temp <- temp$replicate[order(temp$by)]
temp <- subset(track,procedure==1 & year>=2015)
temp <- ddply(temp,.(replicate),summarise,by=mean(biomass_status))
temp <- temp$replicate[order(temp$by)]
replicate_egs <- temp[floor(length(temp)*c(0.2,0.5,0.8))]
replicate_egs
replicate_egs <- temp[floor(length(temp)*c(0.2,0.5,0.8))]
replicate_egs <- factor(replicate_egs,levels=replicate_egs,ordered=T)
replicate_egs
temp <- subset(data,replicate %in% replicate_egs)
temp$replicate <- factor(temp$replicate,levels=replicate_egs)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
temp <- subset(data,replicate %in% replicate_egs)
temp$replicate <- factor(temp$replicate,levels=replicate_egs)
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=temp,aes(x=year,y=y,colour=replicate)) +
geom_vline(x=2014.8,linetype=2) +
scale_colour_manual(values=hsv(c(0,0.66,0.33),0.6,0.6)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
temp <- subset(data,replicate %in% replicate_egs)
temp$replicate <- factor(temp$replicate,levels=replicate_egs)
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=temp,aes(x=year,y=y,colour=replicate)) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(y=0,alpha=0) +
scale_colour_manual(values=hsv(c(0,0.66,0.33),0.6,0.6)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,1))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
temp <- subset(track,quarter==3 & procedure %in% c(-1,3))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
temp <- subset(data,replicate %in% replicate_egs)
temp$replicate <- factor(temp$replicate,levels=replicate_egs)
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=temp,aes(x=year,y=y,colour=replicate),alpha=0.3) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(y=0,alpha=0) +
scale_colour_manual(values=hsv(c(0,0.66,0.33),0.6,0.6)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,3))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
# Quantile plotting function
plot_ribbon <- function(data,y,ylab='Value',xlab='Year'){
# Evaluation the y expression
data$y <- eval(y,envir=data)
# Calculate quantiles
quantiles = ddply(data,.(year),function(data){
quantiles = quantile(data$y,p=c(0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99),na.rm=T)
data.frame(
p1 = quantiles[1],
p5 = quantiles[2],
p10 = quantiles[3],
p25 = quantiles[4],
p50 = quantiles[5],
p75 = quantiles[6],
p90 = quantiles[7],
p95 = quantiles[8],
p99 = quantiles[9]
)
})
# Plot
temp <- subset(data,replicate %in% replicate_egs)
temp$replicate <- factor(temp$replicate,levels=replicate_egs)
p = ggplot() +
geom_ribbon(data=quantiles,aes(x=year,ymin=p5,ymax=p95),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p10,ymax=p90),alpha=0.1) +
geom_ribbon(data=quantiles,aes(x=year,ymin=p25,ymax=p75),alpha=0.1) +
geom_line(data=temp,aes(x=year,y=y,colour=replicate),alpha=0.6) +
geom_vline(x=2014.8,linetype=2) +
geom_hline(y=0,alpha=0) +
scale_colour_manual(values=hsv(c(0,0.66,0.33),0.6,0.6)) +
labs(x=xlab,y=ylab) +
theme(legend.position='none')
print(p)
p
}
temp <- subset(track,quarter==3 & procedure %in% c(-1,3))
p1 <- plot_ribbon(temp,y=quote(catches_total/1e3),ylab='Catch (last quarter,kt)')
p2 <- plot_ribbon(temp,y=quote(biomass_status),ylab='Status (B/B0)')
multiplot(p1,p2)
proc = 3
procedures[procedure==proc]
subset(procedures,procedure==proc)
row[,3:13]
row <- subset(procedures,procedure==proc)
row[,3:13]
row[3:13]
row[,3:13]
row
row[,3:12]
?is.na
paste(row$class,na.omit(row[,3:12]))
paste0(row$class,'(',paste(na.omit(row[,3:12]),collapse=','),')')
na.omit(row[,3:12])
row <- subset(procedures,procedure==proc)
pars <- row[,3:12][!is.na(row[,3:12])]
paste0(row$class,'(',paste(pars,collapse=','),')')
# Function for creating a signature for a MP instance
mp_sig <- function(proc){
row <- subset(procedures,procedure==proc)
pars <- row[,3:12][!is.na(row[,3:12])]
paste0(row$class,'(',paste(pars,collapse=','),')')
}
mp_sig(3)
mp_sig(1)
print(
ggplot(melt(perfs[,stats]),aes(x=value)) +
geom_density(fill='grey') + facet_wrap(~variable,scales='free')
)
ggplot(perfs,aes(x=cpue_w_ps,y=cpue_m_pl)) + geom_point() + geom_abline(linetype=3)
ggplot(perfs,aes(x=cpue_w_ps,y=cpue_m_pl,colour=class)) +
geom_point() +
geom_abline(linetype=3)
ggplot(perfs,aes(x=cpue_w_ps,y=cpue_m_pl,colour=class,shape=class)) +
geom_point(size=3) +
geom_abline(linetype=3)
plot_tradeoff(
subset(perfs,class=="FRange"),
x = list(yield='Yield (mean annual catch, `000 t)'),
y = list(status='Status (mean of B/B0)'),
colour = list(p3='Target'),
shape = list(p4='Buffer')
)
plot_tradeoff(
subset(perfs,class=="FRange"),
x = list(yield='Yield (mean annual catch, `000 t)'),
y = list(stability='Stability'),
colour = list(p3='Target'),
shape = list(p4='Buffer')
)
plot_tradeoff(
subset(perfs,class=="FRange"),
x = list(yield='Yield (mean annual catch, `000 t)'),
y = list(stability='Stability'),
colour = list(p1='Frequency'),
shape = list(p4='Buffer')
)
quantiles <- quantile(samples[,par])
names(sample)
names(samples)
par <- 'spawners_unfished.value'
# Calculate quantiles for parameter
quantiles <- quantile(samples[,par])
quantiles
quantiles <- quantile(samples[,par],p=seq(0,1,0.1))
quantiles
cut(values,quantiles)
values <- samples[,par]
# Calculate quantiles for parameter
quantiles <- quantile(values,p=seq(0,1,0.1))
# Cut
cut(values,quantiles)
as.integer(cut)
as.integer(cut(values,quantiles))
perf <- subset(pers,procedure==3)
perf <- subset(perfs,procedure==3)
perf <- subset(perfs,procedure==3)
perf$quantile <- as.integer(cut(values,quantiles))
ddply(perf,.(quantile),summarise,
yield = mean(yield)
)
perf
perfs
performance <- subset(performances,procedure==3)
performance$quantile <- as.integer(cut(values,quantiles))
ddply(perf,.(quantile),summarise,
yield = mean(yield)
)
name(performance)
names(performance)
ddply(perf,.(quantile),summarise,
yield = mean(catches_total)
)
ddply(performance,.(quantile),summarise,
yield = mean(catches_total)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=yield))
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=yield))
name(samples)
names(samples)
par <- 'mortality_base.value'
values <- samples[,par]
# Calculate quantiles for parameter
quantiles <- quantile(values,p=seq(0,1,0.1))
# Cut
performance <- subset(performances,procedure==3)
performance$quantile <- as.integer(cut(values,quantiles))
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=yield))
par <- 'maturity_inflection.value'
values <- samples[,par]
# Calculate quantiles for parameter
quantiles <- quantile(values,p=seq(0,1,0.1))
# Cut
performance <- subset(performances,procedure==3)
performance$quantile <- as.integer(cut(values,quantiles))
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=yield))
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total),
status = mean(biomass_status)
)
names(samples)
names(performance)
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total),
status = mean(status_mean)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=status))
par <- 'movement_stay.value'
values <- samples[,par]
# Calculate quantiles for parameter
quantiles <- quantile(values,p=seq(0,1,0.1))
# Cut
performance <- subset(performances,procedure==3)
performance$quantile <- as.integer(cut(values,quantiles))
sensitivity <- ddply(performance,.(quantile),summarise,
yield = mean(catches_total),
status = mean(status_mean)
)
ggplot(sensitivity) +
geom_line(aes(x=quantile,y=status))
table(performance,quantile)
table(performance$quantile)
source('functions.R')
116*125
